lang_dis_dataset.csv
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/
*.out

figures/
.vscode/
.DS_Store
internal/
jobs_parallel-copy/
wandb/
*.ipynb
hf-weights/

# .gitignore for the Byte Latent Transformer Project

# ===================================================================
# 1. Datasets and Large Data Files
# These are typically very large and should not be in version control.
# Use a cloud storage solution like GCP Cloud Storage for these.
# ===================================================================
# Ignore the main large CSV and its compressed version at the root
/COHFIE_V4.csv
/COHFIE_V4.zip
/my_data.jsonl

# Ignore the entire data directory, which contains raw chunks,
# preprocessed .arrow files, and generated research subsets.
/data/

# Ignore any other top-level data files
/output.arrow
/unique_combinations.csv


# ===================================================================
# 2. Model Checkpoints, Weights, and Logs
# These are generated artifacts from training and downloading.
# ===================================================================
# Ignore all trained models and their checkpoints
/models/

# Ignore all downloaded weights (e.g., from Hugging Face)
/hf-weights/

# Ignore the WandB logging and artifacts directory
/wandb/

# Ignore general log files
*.log


# ===================================================================
# 3. Python & System Artifacts
# These files are generated by Python, build systems, or the OS.
# ===================================================================
# Python bytecode
__pycache__/
*.py[cod]
*$py.class

# Python build artifacts
/build/
/dist/
*.egg-info/
*.egg

# Python virtual environments
.venv/
venv/
env/
*.env

# OS-specific files
.DS_Store
Thumbs.db


# ===================================================================
# 4. Generated Analysis, Reports, and Figures
# These files are outputs of your analysis scripts. It's better to
# version control the scripts that generate them, not the outputs themselves.
# ===================================================================
# Ignore analysis results from the root directory
/cohfie_*.csv
/cohfie_*.txt
/tokenization_results_*.txt
/tokenization_results_*.json
/entropy_comparison_*.csv
/entropy_comparison_*.txt
/social_media_subset_analysis.txt
/formal_news_subset_analysis.txt
/literary_encyclopedic_subset_analysis.txt
/tagalog-roberta.pdf
/tagalog-roberta.txt
/blt.pdf
/blt.txt

# Ignore generated figures
/blt-figure.jpg
/blt-figure.pdf
/plot_data/


# ===================================================================
# 5. Local Configuration (Optional but good practice)
# You can create a local config file for things like API keys or
# specific paths that you don't want to share.
# ===================================================================
*.local.yaml
local_settings.py
comprehensive_tokenizer_data_*.json
